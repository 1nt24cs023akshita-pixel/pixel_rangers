# Generated by Django 5.2.6 on 2025-09-06 08:05

import django.core.validators
import django.db.models.deletion
import uuid
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('products', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='ChatMessage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('message', models.TextField()),
                ('is_abusive', models.BooleanField(default=False)),
                ('abuse_score', models.FloatField(default=0.0, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ['created_at'],
            },
        ),
        migrations.CreateModel(
            name='ChatRoom',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('is_active', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='EcoChallenge',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField()),
                ('target_co2', models.DecimalField(decimal_places=2, max_digits=10)),
                ('start_date', models.DateTimeField()),
                ('end_date', models.DateTimeField()),
                ('is_active', models.BooleanField(default=True)),
                ('reward_points', models.PositiveIntegerField(default=100)),
            ],
        ),
        migrations.CreateModel(
            name='EcoPickupZone',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('address', models.TextField()),
                ('latitude', models.DecimalField(decimal_places=6, max_digits=9)),
                ('longitude', models.DecimalField(decimal_places=6, max_digits=9)),
                ('description', models.TextField(blank=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='ProductLike',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='UserChallenge',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('co2_saved', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=10)),
                ('is_completed', models.BooleanField(default=False)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
            ],
        ),
        migrations.AddField(
            model_name='category',
            name='avg_co2_per_kg',
            field=models.DecimalField(decimal_places=2, default=0.0, help_text='Average CO2 emissions per kg for this category', max_digits=10),
        ),
        migrations.AddField(
            model_name='category',
            name='color',
            field=models.CharField(default='primary', max_length=20),
        ),
        migrations.AddField(
            model_name='category',
            name='depreciation_rate',
            field=models.DecimalField(decimal_places=2, default=0.2, help_text='Depreciation rate for smart pricing (0.0-1.0)', max_digits=3),
        ),
        migrations.AddField(
            model_name='product',
            name='ai_verified',
            field=models.BooleanField(default=False, help_text='AI has verified this listing'),
        ),
        migrations.AddField(
            model_name='product',
            name='co2_saved',
            field=models.DecimalField(decimal_places=2, default=0.0, help_text='CO2 saved by buying this instead of new (kg)', max_digits=10),
        ),
        migrations.AddField(
            model_name='product',
            name='estimated_weight',
            field=models.DecimalField(blank=True, decimal_places=2, help_text='Estimated weight in kg for CO2 calculation', max_digits=8, null=True),
        ),
        migrations.AddField(
            model_name='product',
            name='expires_at',
            field=models.DateTimeField(blank=True, help_text='When this listing expires (optional)', null=True),
        ),
        migrations.AddField(
            model_name='product',
            name='fake_detection_score',
            field=models.FloatField(default=0.0, help_text='AI confidence score (0=fake, 1=real)'),
        ),
        migrations.AddField(
            model_name='product',
            name='is_smart_priced',
            field=models.BooleanField(default=False, help_text='Price calculated using smart pricing formula'),
        ),
        migrations.AddField(
            model_name='product',
            name='likes_count',
            field=models.PositiveIntegerField(default=0),
        ),
        migrations.AddField(
            model_name='product',
            name='manual_review_required',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='product',
            name='original_price',
            field=models.DecimalField(blank=True, decimal_places=2, help_text='Original retail price for CO2 calculation', max_digits=10, null=True),
        ),
        migrations.AddField(
            model_name='product',
            name='sustainability_score',
            field=models.PositiveIntegerField(default=0, help_text='Sustainability score (0-100)'),
        ),
        migrations.AddField(
            model_name='product',
            name='video',
            field=models.FileField(blank=True, help_text='Optional video showing the product', null=True, upload_to='products/videos/'),
        ),
        migrations.AddField(
            model_name='product',
            name='views_count',
            field=models.PositiveIntegerField(default=0),
        ),
        migrations.AlterField(
            model_name='product',
            name='condition',
            field=models.CharField(choices=[('excellent', 'Like New'), ('good', 'Good'), ('fair', 'Average'), ('poor', 'Poor')], default='good', max_length=20),
        ),
        migrations.AlterField(
            model_name='product',
            name='id',
            field=models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False),
        ),
        migrations.AlterField(
            model_name='product',
            name='status',
            field=models.CharField(choices=[('available', 'Available'), ('sold', 'Sold'), ('pending', 'Pending'), ('flagged', 'Flagged for Review')], default='available', max_length=20),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['status', 'created_at'], name='products_pr_status_36c7aa_idx'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['category', 'status'], name='products_pr_categor_75eeb5_idx'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['seller', 'status'], name='products_pr_seller__2449b8_idx'),
        ),
        migrations.AddField(
            model_name='chatmessage',
            name='sender',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='chatroom',
            name='buyer',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='buyer_chats', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='chatroom',
            name='product',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='chat_rooms', to='products.product'),
        ),
        migrations.AddField(
            model_name='chatroom',
            name='seller',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='seller_chats', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='chatmessage',
            name='room',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='messages', to='products.chatroom'),
        ),
        migrations.AddField(
            model_name='productlike',
            name='product',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='likes', to='products.product'),
        ),
        migrations.AddField(
            model_name='productlike',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='userchallenge',
            name='challenge',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='products.ecochallenge'),
        ),
        migrations.AddField(
            model_name='userchallenge',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='challenges', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterUniqueTogether(
            name='chatroom',
            unique_together={('product', 'buyer', 'seller')},
        ),
        migrations.AlterUniqueTogether(
            name='productlike',
            unique_together={('user', 'product')},
        ),
        migrations.AlterUniqueTogether(
            name='userchallenge',
            unique_together={('user', 'challenge')},
        ),
    ]
